"use client";

import { DevToolsSidebar } from "@/components/dev-tools-sidebar";
import {
  Breadcrumb,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbList,
  BreadcrumbPage,
  BreadcrumbSeparator,
} from "@/components/ui/breadcrumb";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Separator } from "@/components/ui/separator";
import {
  SidebarInset,
  SidebarProvider,
  SidebarTrigger,
} from "@/components/ui/sidebar";
import {
  Shield,
  AlertTriangle,
  CheckCircle,
  XCircle,
  Play,
  FileText,
  Bug,
  Sparkles,
  PartyPopper,
  ExternalLink,
} from "lucide-react";
import { useParams } from "next/navigation";
import { useState, useEffect } from "react";
import axios from "axios";
import { Skeleton } from "@/components/ui/skeleton";
import Link from "next/link";

export default function VulnerabilityScannerPage() {
  const params = useParams<{ id: string }>();
  const repoSlug = params.id;
  const [projectData, setProjectData] = useState<any>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(false);
  const [isScanning, setIsScanning] = useState(false);
  const [scanProgress, setScanProgress] = useState(0);
  const [vulnerabilities, setVulnerabilities] = useState<any[]>([]);
  const [scanComplete, setScanComplete] = useState(false);
  const [repoUrl, setRepoUrl] = useState("");

  useEffect(() => {
    const fetchProjectData = async () => {
      try {
        const response = await axios.get(
          `${process.env.NEXT_PUBLIC_SERVER_URL}/project/${repoSlug}/bugs`,
          {
            headers: {
              Authorization: `Bearer ${sessionStorage.getItem("accessToken")}`,
            },
          }
        );
        const response2 = await axios.get(
          `${process.env.NEXT_PUBLIC_SERVER_URL}/project/${repoSlug}`,
          {
            headers: {
              Authorization: `Bearer ${sessionStorage.getItem("accessToken")}`,
            },
          }
        );
        console.log(response2.data.data.project.repoUrl)
        setRepoUrl(response2.data.data.project.repoUrl);
        setProjectData(response.data.data.bugDetect);
        console.log(response.data.data.bugDetect)
        setLoading(false);
      } catch (err) {
        setError(true);
        setLoading(false);
      }
    };

    fetchProjectData();
  }, [repoSlug]);

  useEffect(() => {
    if (!projectData) return;

    const extractedVulns: any[] = [];

    Object.entries(projectData).forEach(
      ([filePath, fileData]: [string, any]) => {
        if (fileData.bug_report && fileData.bug_report.length > 0) {
          fileData.bug_report.forEach((bug: any) => {
            extractedVulns.push({
              ...bug,
              file: filePath,
              language: fileData.language,
            });
          });
        }
      }
    );

    setVulnerabilities(extractedVulns);
  }, [projectData]);

  // Calculate vulnerability counts
  const vulnCounts = vulnerabilities.reduce((acc, vuln) => {
    const severity = vuln.severity.toLowerCase();
    acc[severity] = (acc[severity] || 0) + 1;
    return acc;
  }, {} as Record<string, number>);

  const startScan = () => {
    setIsScanning(true);
    setScanProgress(0);
    setScanComplete(false);

    // Simulate scanning progress
    const interval = setInterval(() => {
      setScanProgress((prev) => {
        if (prev >= 100) {
          clearInterval(interval);
          setIsScanning(false);
          setScanComplete(true);
          return 100;
        }
        return prev + 10;
      });
    }, 200);
  };

  const getSeverityIcon = (severity: string) => {
    switch (severity.toLowerCase()) {
      case "high":
        return <XCircle className="h-5 w-5 text-red-500" />;
      case "medium":
        return <AlertTriangle className="h-5 w-5 text-yellow-500" />;
      case "low":
        return <CheckCircle className="h-5 w-5 text-blue-500" />;
      default:
        return <Bug className="h-5 w-5 text-gray-500" />;
    }
  };

  const getSeverityVariant = (severity: string) => {
    switch (severity.toLowerCase()) {
      case "high":
        return "destructive" as const;
      case "medium":
        return "default" as const;
      case "low":
        return "secondary" as const;
      default:
        return "outline" as const;
    }
  };

  // Helper to get per-file status
  const getFileStatus = (fileData: any) => {
    if (!fileData.bug_report || fileData.bug_report.length === 0) {
      return "clean";
    }
    return "vulnerable";
  };

  if (loading) {
    return (
      <SidebarProvider className="bg-grain">
        <DevToolsSidebar id={params.id} />
        <SidebarInset>
          <header className="flex h-16 shrink-0 items-center gap-2 transition-[width,height] ease-linear group-has-[[data-collapsible=icon]]/sidebar-wrapper:h-12">
            <div className="flex items-center gap-2 px-4">
              <SidebarTrigger className="-ml-1 animate-pulse" />
              <Separator orientation="vertical" className="mr-2 h-4" />
              <Breadcrumb>
                <BreadcrumbList>
                  <BreadcrumbItem>
                    <BreadcrumbLink href={`/dashboard/${params.id}`}>Dashboard</BreadcrumbLink>
                  </BreadcrumbItem>
                  <BreadcrumbSeparator />
                  <BreadcrumbItem>
                    <BreadcrumbPage>Vulnerability Scanner</BreadcrumbPage>
                  </BreadcrumbItem>
                </BreadcrumbList>
              </Breadcrumb>
            </div>
          </header>
          <div className="flex flex-1 flex-col gap-4 p-4 pt-0">
            <div className="space-y-4">
              <div className="flex items-center gap-2">
                <Skeleton className="h-6 w-6 rounded-full" />
                <div>
                  <Skeleton className="h-6 w-48 mb-2" />
                  <Skeleton className="h-4 w-80" />
                </div>
              </div>
              <div className="grid gap-6">
                <Card>
                  <CardHeader>
                    <Skeleton className="h-6 w-40 mb-2" />
                    <Skeleton className="h-4 w-64" />
                  </CardHeader>
                  <CardContent>
                    <div className="grid gap-4">
                      {[...Array(3)].map((_, i) => (
                        <div key={i} className="flex items-center justify-between border rounded-lg p-4">
                          <div className="flex items-center gap-3">
                            <Skeleton className="h-6 w-6 rounded-full" />
                            <div>
                              <Skeleton className="h-4 w-32 mb-1" />
                              <Skeleton className="h-3 w-16" />
                            </div>
                          </div>
                          <Skeleton className="h-4 w-24" />
                        </div>
                      ))}
                    </div>
                  </CardContent>
                </Card>
                <Card>
                  <CardHeader>
                    <Skeleton className="h-6 w-32 mb-2" />
                    <Skeleton className="h-4 w-56" />
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-4">
                      <div className="grid grid-cols-3 gap-4">
                        {[...Array(3)].map((_, i) => (
                          <div key={i} className="flex items-center gap-2">
                            <Skeleton className="h-5 w-5 rounded-full" />
                            <div>
                              <Skeleton className="h-4 w-16 mb-1" />
                              <Skeleton className="h-3 w-20" />
                            </div>
                          </div>
                        ))}
                      </div>
                      <Separator />
                      <div className="space-y-3">
                        {[...Array(2)].map((_, i) => (
                          <div key={i} className="border rounded-lg p-4">
                            <div className="flex items-start justify-between">
                              <div className="space-y-2 flex-1">
                                <div className="flex items-center gap-2">
                                  <Skeleton className="h-5 w-5 rounded-full" />
                                  <Skeleton className="h-4 w-20" />
                                  <Skeleton className="h-4 w-32" />
                                </div>
                                <Skeleton className="h-3 w-40" />
                                <div className="flex items-center gap-2">
                                  <Skeleton className="h-3 w-16" />
                                  <Skeleton className="h-3 w-10" />
                                  <Skeleton className="h-3 w-12" />
                                </div>
                              </div>
                            </div>
                          </div>
                        ))}
                      </div>
                    </div>
                  </CardContent>
                </Card>
              </div>
            </div>
          </div>
        </SidebarInset>
      </SidebarProvider>
    );
  }

  return (
    <SidebarProvider className="bg-grain">
      <DevToolsSidebar id={params.id} />
      <SidebarInset>
        <header className="flex h-16 shrink-0 items-center gap-2 transition-[width,height] ease-linear group-has-[[data-collapsible=icon]]/sidebar-wrapper:h-12">
          <div className="flex items-center gap-2 px-4">
            <SidebarTrigger className="-ml-1 animate-pulse" />
            <Separator orientation="vertical" className="mr-2 h-4" />
            <Breadcrumb>
              <BreadcrumbList>
                <BreadcrumbItem>
                  <BreadcrumbLink href={`/dashboard/${params.id}`}>Dashboard</BreadcrumbLink>
                </BreadcrumbItem>
                <BreadcrumbSeparator />
                <BreadcrumbItem>
                  <BreadcrumbPage>Vulnerability Scanner</BreadcrumbPage>
                </BreadcrumbItem>
              </BreadcrumbList>
            </Breadcrumb>
          </div>
        </header>
        <div className="flex flex-1 flex-col gap-4 p-4 pt-0">
          <div className="space-y-4">
            <div className="flex items-center gap-2">
              <Shield className="h-6 w-6 text-green-600 animate-bounce" />
              <div>
                <h1 className="text-2xl font-bold tracking-tight">
                  Vulnerability Scanner
                </h1>
                <p className="text-muted-foreground">
                  Your code’s safety, celebrated. Scan for vulnerabilities and get instant, actionable feedback!
                </p>
              </div>
            </div>

            <div className="grid gap-6">
              {scanComplete && projectData && (
                <Card>
                  <CardHeader>
                    <CardTitle>File-by-File Security Report</CardTitle>
                    <CardDescription>
                      Every file, every detail. Celebrate your secure code!
                    </CardDescription>
                  </CardHeader>
                  <CardContent>
                    <div className="grid gap-4">
                      {Object.entries(projectData).map(([filePath, fileData]: [string, any]) => {
                        const status = getFileStatus(fileData);
                        return (
                          <div
                            key={filePath}
                            className={`flex items-center justify-between border rounded-lg p-4 transition-all duration-300 ${status === "clean"
                              ? "bg-green-50 border-green-200"
                              : "bg-red-50 border-red-200"
                              }`}
                          >
                            <div className="flex items-center gap-3">
                              {status === "clean" ? (
                                <CheckCircle className="h-6 w-6 text-green-500 animate-bounce" />
                              ) : (
                                <XCircle className="h-6 w-6 text-red-500 animate-pulse" />
                              )}
                              <div>
                                <div className="font-semibold">
                                  {filePath}
                                </div>
                                <div className="text-xs text-muted-foreground">
                                  {fileData.language}
                                </div>
                              </div>
                            </div>
                            <div>
                              {status === "clean" ? (
                                <span className="text-green-700 font-medium flex items-center gap-1">
                                  <Sparkles className="h-4 w-4 text-green-400" />
                                  No issues found
                                </span>
                              ) : (
                                <span className="text-red-700 font-medium">
                                  {fileData.bug_report.length} issue{fileData.bug_report.length > 1 ? "s" : ""} found
                                </span>
                              )}
                            </div>
                          </div>
                        );
                      })}
                    </div>
                  </CardContent>
                </Card>
              )}

              {vulnerabilities.length > 0 && (
                <Card>
                  <CardHeader>
                    <CardTitle>Scan Results</CardTitle>
                    <CardDescription>
                      {vulnerabilities.length} security vulnerabilities found. Let’s make your code even better!
                    </CardDescription>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-4">
                      <div className="grid grid-cols-3 gap-4">
                        <div className="flex items-center gap-2">
                          <XCircle className="h-5 w-5 text-red-500" />
                          <div>
                            <div className="font-semibold">
                              {vulnCounts.high || 0} High
                            </div>
                            <div className="text-sm text-muted-foreground">
                              Critical issues
                            </div>
                          </div>
                        </div>
                        <div className="flex items-center gap-2">
                          <AlertTriangle className="h-5 w-5 text-yellow-500" />
                          <div>
                            <div className="font-semibold">
                              {vulnCounts.medium || 0} Medium
                            </div>
                            <div className="text-sm text-muted-foreground">
                              Moderate issues
                            </div>
                          </div>
                        </div>
                        <div className="flex items-center gap-2">
                          <CheckCircle className="h-5 w-5 text-blue-500" />
                          <div>
                            <div className="font-semibold">
                              {vulnCounts.low || 0} Low
                            </div>
                            <div className="text-sm text-muted-foreground">
                              Minor issues
                            </div>
                          </div>
                        </div>
                      </div>

                      <Separator />

                      <div className="space-y-3">
                        {vulnerabilities.map((vuln, index) => (
                          <Link href={`${repoUrl}/blob/main/${vuln.file}#L${vuln.line}`}>
                            <div key={index} className="border rounded-lg p-4 cursor-pointer" >
                              <div className="flex items-start justify-between">
                                <div className="space-y-2 flex-1">
                                  <div className="flex items-center gap-2">
                                    {getSeverityIcon(vuln.severity)}
                                    <Badge
                                      variant={getSeverityVariant(vuln.severity)}
                                    >
                                      {vuln.severity.toUpperCase()}
                                    </Badge>
                                    <h4 className="font-semibold">
                                      {vuln.issue}
                                    </h4>
                                    {/* StackOverflow button if hits exist */}
                                    {Array.isArray(vuln.stackoverflow_hits) && vuln.stackoverflow_hits.length > 0 && (
                                      <Button
                                        asChild
                                        size="icon"
                                        variant="outline"
                                        className="ml-2"
                                        title="View on Stack Overflow"
                                      >
                                        <a
                                          href={vuln.stackoverflow_hits[0].link}
                                          target="_blank"
                                          rel="noopener noreferrer"
                                        >
                                          <ExternalLink className="h-4 w-4 text-orange-500" />
                                        </a>
                                      </Button>
                                    )}
                                  </div>
                                  <p className="text-sm text-muted-foreground">
                                    {vuln.fix}
                                  </p>
                                  <div className="flex items-center gap-2 text-xs text-muted-foreground">
                                    <FileText className="h-3 w-3" />
                                    <span>
                                      {vuln.file}:{vuln.line}
                                    </span>
                                    <Badge variant="outline" className="text-xs">
                                      {vuln.language}
                                    </Badge>
                                  </div>
                                </div>
                              </div>
                            </div>
                          </Link>
                        ))}
                      </div>
                    </div>
                  </CardContent>
                </Card>
              )}

              {vulnerabilities.length === 0 && scanComplete && (
                <Card>
                  <CardContent className="flex flex-col items-center justify-center py-12 relative overflow-hidden">
                    <PartyPopper className="h-16 w-16 text-yellow-400 mb-4 animate-bounce" />
                    <h3 className="text-2xl font-bold mb-2 text-green-700 flex items-center gap-2">
                      <Sparkles className="h-6 w-6 text-green-400 animate-pulse" />
                      All Clear!
                    </h3>
                    <p className="text-muted-foreground text-center mb-4 max-w-md">
                      🎉 Congratulations! No vulnerabilities were found in your codebase.<br />
                      Your security hygiene is excellent. Keep up the great work!
                    </p>
                    <div className="flex gap-2 mt-2">
                      <Button variant="outline" size="sm" onClick={() => window.location.reload()}>
                        <Play className="mr-2 h-4 w-4" />
                        Scan Again
                      </Button>
                    </div>
                    <div className="absolute inset-0 pointer-events-none opacity-20 bg-gradient-to-br from-green-100 via-yellow-100 to-white z-0" />
                  </CardContent>
                </Card>
              )}
            </div>
          </div>
        </div>
      </SidebarInset>
    </SidebarProvider>
  );
}