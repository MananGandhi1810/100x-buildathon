"use client";

import { DevToolsSidebar } from "@/components/dev-tools-sidebar";
import {
  Breadcrumb,
  BreadcrumbItem,
  BreadcrumbLink,
  BreadcrumbList,
  BreadcrumbPage,
  BreadcrumbSeparator,
} from "@/components/ui/breadcrumb";
import { Button } from "@/components/ui/button";
import {
  Card,
  CardContent,
  CardDescription,
  CardHeader,
  CardTitle,
} from "@/components/ui/card";
import { Badge } from "@/components/ui/badge";
import { Progress } from "@/components/ui/progress";
import { Separator } from "@/components/ui/separator";
import {
  SidebarInset,
  SidebarProvider,
  SidebarTrigger,
} from "@/components/ui/sidebar";
import {
  Shield,
  AlertTriangle,
  CheckCircle,
  XCircle,
  Play,
  FileText,
  Bug,
} from "lucide-react";
import { useParams } from "next/navigation";
import { useState, useEffect } from "react";
import axios from "axios";

export default function VulnerabilityScannerPage() {
  const params = useParams<{ id: string }>();
  const repoSlug = params.id;
  const [projectData, setProjectData] = useState<any>(null);
  const [loading, setLoading] = useState(true);
  const [error, setError] = useState(false);
  const [isScanning, setIsScanning] = useState(false);
  const [scanProgress, setScanProgress] = useState(0);
  const [vulnerabilities, setVulnerabilities] = useState<any[]>([]);
  const [scanComplete, setScanComplete] = useState(false);

  useEffect(() => {
    const fetchProjectData = async () => {
      try {
        const response = await axios.get(
          `${process.env.NEXT_PUBLIC_SERVER_URL}/project/${repoSlug}`,
          {
            headers: {
              Authorization: `Bearer ${sessionStorage.getItem("accessToken")}`,
            },
          },
        );
        console.log("Project data response:", response.data.data.aiAnalysis);
        setProjectData(response.data.data.aiAnalysis.bugs);
        setLoading(false);
      } catch (err) {
        console.error(err);
        setError(true);
        setLoading(false);
      }
    };

    fetchProjectData();
  }, [repoSlug]);

  useEffect(() => {
    if (!projectData) return;

    const extractedVulns: any[] = [];

    Object.entries(projectData).forEach(
      ([filePath, fileData]: [string, any]) => {
        if (fileData.bug_report && fileData.bug_report.length > 0) {
          fileData.bug_report.forEach((bug: any) => {
            extractedVulns.push({
              ...bug,
              file: filePath,
              language: fileData.language,
            });
          });
        }
      },
    );

    setVulnerabilities(extractedVulns);
  }, [projectData]);

  // Calculate vulnerability counts
  const vulnCounts = vulnerabilities.reduce(
    (acc, vuln) => {
      const severity = vuln.severity.toLowerCase();
      acc[severity] = (acc[severity] || 0) + 1;
      return acc;
    },
    {} as Record<string, number>,
  );

  const startScan = () => {
    setIsScanning(true);
    setScanProgress(0);
    setScanComplete(false);

    // Simulate scanning progress
    const interval = setInterval(() => {
      setScanProgress((prev) => {
        if (prev >= 100) {
          clearInterval(interval);
          setIsScanning(false);
          setScanComplete(true);
          return 100;
        }
        return prev + 10;
      });
    }, 200);
  };

  const getSeverityIcon = (severity: string) => {
    switch (severity.toLowerCase()) {
      case "high":
        return <XCircle className="h-5 w-5 text-red-500" />;
      case "medium":
        return <AlertTriangle className="h-5 w-5 text-yellow-500" />;
      case "low":
        return <CheckCircle className="h-5 w-5 text-blue-500" />;
      default:
        return <Bug className="h-5 w-5 text-gray-500" />;
    }
  };

  const getSeverityVariant = (severity: string) => {
    switch (severity.toLowerCase()) {
      case "high":
        return "destructive" as const;
      case "medium":
        return "default" as const;
      case "low":
        return "secondary" as const;
      default:
        return "outline" as const;
    }
  };

  return (
    <SidebarProvider className="bg-grain">
      <DevToolsSidebar id={params.id} />
      <SidebarInset>
        <header className="flex h-16 shrink-0 items-center gap-2 transition-[width,height] ease-linear group-has-[[data-collapsible=icon]]/sidebar-wrapper:h-12">
          <div className="flex items-center gap-2 px-4">
            <SidebarTrigger className="-ml-1" />
            <Separator orientation="vertical" className="mr-2 h-4" />
            <Breadcrumb>
              <BreadcrumbList>
                <BreadcrumbItem>
                  <BreadcrumbLink href="/dashboard">Dashboard</BreadcrumbLink>
                </BreadcrumbItem>
                <BreadcrumbSeparator />
                <BreadcrumbItem>
                  <BreadcrumbPage>Vulnerability Scanner</BreadcrumbPage>
                </BreadcrumbItem>
              </BreadcrumbList>
            </Breadcrumb>
          </div>
        </header>
        <div className="flex flex-1 flex-col gap-4 p-4 pt-0">
          <div className="space-y-4">
            <div className="flex items-center gap-2">
              <Shield className="h-6 w-6 text-red-600" />
              <div>
                <h1 className="text-2xl font-bold tracking-tight">
                  Vulnerability Scanner
                </h1>
                <p className="text-muted-foreground">
                  Scan your code for security vulnerabilities
                </p>
              </div>
            </div>

            <div className="grid gap-6">
              <Card>
                <CardHeader>
                  <CardTitle>Security Scan</CardTitle>
                  <CardDescription>
                    Run a comprehensive security scan on your codebase
                  </CardDescription>
                </CardHeader>
                <CardContent className="space-y-4">
                  <div className="flex items-center gap-4">
                    <Button onClick={startScan} disabled={isScanning}>
                      <Play className="mr-2 h-4 w-4" />
                      {isScanning ? "Scanning..." : "Start Security Scan"}
                    </Button>
                    <div className="text-sm text-muted-foreground">
                      {scanComplete
                        ? "Last scan: Just now"
                        : "Last scan: 2 hours ago"}
                    </div>
                  </div>
                  {(isScanning || scanComplete) && (
                    <div className="space-y-2">
                      <div className="flex justify-between text-sm">
                        <span>Scan Progress</span>
                        <span>{scanProgress}%</span>
                      </div>
                      <Progress value={scanProgress} className="w-full" />
                    </div>
                  )}
                </CardContent>
              </Card>

              {vulnerabilities.length > 0 && (
                <Card>
                  <CardHeader>
                    <CardTitle>Scan Results</CardTitle>
                    <CardDescription>
                      {vulnerabilities.length} security vulnerabilities found in
                      your codebase
                    </CardDescription>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-4">
                      <div className="grid grid-cols-3 gap-4">
                        <div className="flex items-center gap-2">
                          <XCircle className="h-5 w-5 text-red-500" />
                          <div>
                            <div className="font-semibold">
                              {vulnCounts.high || 0} High
                            </div>
                            <div className="text-sm text-muted-foreground">
                              Critical issues
                            </div>
                          </div>
                        </div>
                        <div className="flex items-center gap-2">
                          <AlertTriangle className="h-5 w-5 text-yellow-500" />
                          <div>
                            <div className="font-semibold">
                              {vulnCounts.medium || 0} Medium
                            </div>
                            <div className="text-sm text-muted-foreground">
                              Moderate issues
                            </div>
                          </div>
                        </div>
                        <div className="flex items-center gap-2">
                          <CheckCircle className="h-5 w-5 text-blue-500" />
                          <div>
                            <div className="font-semibold">
                              {vulnCounts.low || 0} Low
                            </div>
                            <div className="text-sm text-muted-foreground">
                              Minor issues
                            </div>
                          </div>
                        </div>
                      </div>

                      <Separator />

                      <div className="space-y-3">
                        {vulnerabilities.map((vuln, index) => (
                          <div key={index} className="border rounded-lg p-4">
                            <div className="flex items-start justify-between">
                              <div className="space-y-2 flex-1">
                                <div className="flex items-center gap-2">
                                  {getSeverityIcon(vuln.severity)}
                                  <Badge
                                    variant={getSeverityVariant(vuln.severity)}
                                  >
                                    {vuln.severity.toUpperCase()}
                                  </Badge>
                                  <h4 className="font-semibold">
                                    {vuln.issue}
                                  </h4>
                                </div>
                                <p className="text-sm text-muted-foreground">
                                  {vuln.fix}
                                </p>
                                <div className="flex items-center gap-2 text-xs text-muted-foreground">
                                  <FileText className="h-3 w-3" />
                                  <span>
                                    {vuln.file}:{vuln.line}
                                  </span>
                                  <Badge variant="outline" className="text-xs">
                                    {vuln.language}
                                  </Badge>
                                </div>
                              </div>
                              <Button variant="outline" size="sm">
                                Fix
                              </Button>
                            </div>
                          </div>
                        ))}
                      </div>
                    </div>
                  </CardContent>
                </Card>
              )}

              {vulnerabilities.length === 0 && scanComplete && (
                <Card>
                  <CardContent className="flex flex-col items-center justify-center py-8">
                    <CheckCircle className="h-12 w-12 text-green-500 mb-4" />
                    <h3 className="text-lg font-semibold mb-2">
                      No Vulnerabilities Found
                    </h3>
                    <p className="text-muted-foreground text-center">
                      Great! Your codebase appears to be secure. Keep up the
                      good work!
                    </p>
                  </CardContent>
                </Card>
              )}
            </div>
          </div>
        </div>
      </SidebarInset>
    </SidebarProvider>
  );
}
